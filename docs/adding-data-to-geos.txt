+++++++++++++++++++++++++++++++++++++++
We want to add some data to a Geography
+++++++++++++++++++++++++++++++++++++++


Figure out what our Data Domains are (that )
----------------------------------------------------------------

We want to direct our attention to the following postgres tables::

    profiles_datadomain

This table should have been loaded with data from migrating the database
and loading the sample census data.

When we do a migrate, the column 'publish' is set to false. Pick the
ones we want to use and update the column 'publish' to true::

    update profiles_datadomain set publish = true;


Subdomains
----------

The db contains a link table to set up subdomains. It's called
'profiles_datadomain_subdomains' -- with a link to the top domain and
the domain below it. In this way, we can fill out on each page which
domains get displayed.

Now for the DATA
----------------

Now that we can see how domains work, it would be helpful if we could
actually view the data for a given domain and location.

Ok, important tables to know here -- Indicators (variables) are bound
up into groups.

So, make a new group for your variables
---------------------------------------

Insert into the table profiles_group::

    insert into profiles_group (name, order)
    values ('Test Population', 1);


profiles_group is references by profiles_datadomainindex, which means we
need to connect our group to our data domain.::

     insert into profiles_datadomainindex ("order", name, "dataDomain_id",
     group_id) values (1, 'Population Test', 13, 1);

This will be the header we see in the app for the set of data. Now we
need to attach indicators to the domain as well into the table
'profiles_indicatordomain' like this::

     insert into profiles_indicatordomain  (indicator_id, domain_id,
     "default") values (1, 1, true);

We also need something in profiles_groupindex::


    insert into profiles_groupindex ( "order", name, groups_id, indicators_id )

    values (1, 'Total Population', 1, 1);


In profiles_indicatorpart, we keep track of a formulate and a time range
for a certain indicator. Meaning if we have a population indicator, then
we're able to link it up to separate time ranges.

The sample data should have two indicatorparts. These indicator parts
need to be hooked up to geographic levels depending on what we actually
have data for.

This is done in the table profiles_indicatorpart_levels. We can do it as
follows (this will, for example insert all records for each indicator we
have) ::

    insert into profiles_indicatorpart_levels (indicatorpart_id,
    geolevel_id)

    select 1, id from profiles_geolevel where year != '2010';

    insert into profiles_indicatorpart_levels (indicatorpart_id,
    geolevel_id)

    select 2, id from profiles_geolevel where year = '2010';


OK, in the app, we can now get the query to run against the API, but there's still no actual data available!? What the heck.
--------------------------------------------------------------------------------------------

So we need to actually get some data to return when the API tries to
look up a particular indicator.

The values that the API looks up are actually stored in the table
'profiles_flatvalue' . When we enter the SAS data, we'll need to throw
it in this table.

For now, we want some flat data values based on geography and
indicators.::

    insert into profiles_flatvalue

    (indicator_id, display_title, indicator_slug, geography_id,
    geography_name, geography_slug, geography_geo_key, value_type,
    time_key, published, f_number, number)

    values (1, 'Total Population', 'total-population',
        5, 'Allegheny County', 42003, 7, 'COUNT', '2010', true,
        "1,281,666", 1281666);

This should return something like this::

    {
    "objects": [
        {
            "display_title": "Total Population",
            "f_moe": null,
            "f_number": "1,281,666",
            "f_percent": null,
            "geography_geo_key": "42003",
            "geography_id": 21,
            "geography_name": "Allegheny County",
            "indicator_slug": "poptottotal-population",
            "moe": null,
            "number": 1281666.0,
            "percent": null,
            "time_key": "2000",
            "value_type": "i"
        }
    ],
    "related": [
        {
            "slug": "poptottotal-population",
            "time_key": "2000",
            "title": "Total Population"
        },
        {
            "slug": "poptottotal-population",
            "time_key": "2010",
            "title": "Total Population"
        }
    ]
    }


Next up -- figure out how these values relate to each other + numerators and denominators...




.. vim:set syntax=rst:
